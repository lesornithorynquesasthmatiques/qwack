<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<schema name="suggestions" version="1.4">
	<types>
		<!-- text_suggest : Matches whole terms in the suggest text  -->
		<fieldType name="text_suggest" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
			</analyzer>
		</fieldType>
		
		<!-- autocomplete_edge : Will match from the left of the field, e.g. if the document field
		     is "A brown fox" and the query is "A bro", it will match, but not "brown"
		-->
		<fieldType name="autocomplete_edge" class="solr.TextField">
			<analyzer type="index">
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([\.,;:-_])" replacement=" " replace="all"/>
				<filter class="solr.EdgeNGramFilterFactory" maxGramSize="30" minGramSize="1"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([\.,;:-_])" replacement=" " replace="all"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="^(.{30})(.*)?" replacement="$1" replace="all"/>
			</analyzer>
		</fieldType>
		
		<!-- autocomplete_ngram : Matches any word in the input field, with implicit right truncation.
		     This means that the field "A brown fox" will be matched by query "bro".
		     We use this to get partial matches, but these whould be boosted lower than exact and left-anchored
		-->
		<fieldType name="autocomplete_ngram" class="solr.TextField">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<filter class="solr.StopFilterFactory" words="stopwords.txt" ignoreCase="true"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EdgeNGramFilterFactory" maxGramSize="20" minGramSize="1"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<filter class="solr.StopFilterFactory" words="stopwords.txt" ignoreCase="true"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="^(.{20})(.*)?" replacement="$1" replace="all"/>
			</analyzer>
		</fieldType>
		
		<!-- Define all the basic field types for consistency -->
		<fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
		<fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
		
	</types>
	<fields>
		<!-- AutoComplete fields
		     Construct documents containing these fields for all suggestions you like to provide
		     Then use a dismax query to search on some fields, display some fields and boost others
		 -->
		
		<field name="id" type="int" indexed="true" stored="true" omitNorms="true" />
		<field name="_version_" type="long" indexed="true" stored="true"/>
		
		<!-- The main text to return as the suggestion. This is not searched -->
		<field name="textsuggest" type="text_suggest" indexed="true" stored="true" omitNorms="true" />
		
		<!-- Suggest type/category. Example: person, book, category, keyword -->
		<field name="type" type="int" indexed="true" stored="true"/>

		<!-- Popularity -->
		<field name="popularity" type="int" indexed="true" stored="true"/>
		
		<!-- A variant of textsuggest which only matches from the very left edge -->
		<copyField source="textsuggest" dest="textnge"/>
		<field name="textnge" type="autocomplete_edge" indexed="true" stored="false" />
		
		<!-- A variant of textsuggest which matches from the left edge of all terms (implicit truncation) -->
		<copyField source="textsuggest" dest="textng"/>
		<field name="textng" type="autocomplete_ngram" indexed="true" stored="false" omitNorms="true" omitTermFreqAndPositions="true" />
		
	</fields>
	<uniqueKey>id</uniqueKey>
	<defaultSearchField>textng</defaultSearchField>
	<solrQueryParser defaultOperator="AND"/>
</schema>